name: Build Safari Web Extension

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Xcode
        run: sudo xcode-select --switch /Applications/Xcode.app

      # üß≠ Debug directory structure for visibility
      - name: Debug path
        run: |
          echo "Current directory:"
          pwd
          echo "Repo structure:"
          ls -R

      # üß© Validate manifest.json before converting
      - name: Validate manifest.json
        run: |
          cd $GITHUB_WORKSPACE/Right-Click-Safari-Extension/SafariWebExtension
          echo "Validating manifest.json..."
          if [ ! -f manifest.json ]; then
            echo "‚ùå Error: manifest.json not found in SafariWebExtension/"
            exit 1
          fi
          cat manifest.json | python3 -m json.tool > /dev/null
          echo "‚úÖ manifest.json is valid JSON."

      # üß± Convert the Safari Web Extension to an Xcode project
      - name: Convert Safari Web Extension
        run: |
          cd $GITHUB_WORKSPACE/Right-Click-Safari-Extension
          mkdir -p build
          echo "Running converter on SafariWebExtension folder..."
          xcrun safari-web-extension-converter SafariWebExtension \
            --no-prompt \
            --project-location build

      # üîç List converter output for verification
      - name: List converter output
        run: |
          cd $GITHUB_WORKSPACE/Right-Click-Safari-Extension/build
          echo "=== Converter output ==="
          ls -R

      # ‚öôÔ∏è Build iOS app (unsigned, for simulator/testing)
      - name: Build iOS app
        run: |
          cd $GITHUB_WORKSPACE/Right-Click-Safari-Extension/build/*
          PROJECT_NAME=$(ls | grep .xcodeproj | sed 's/.xcodeproj//')
          echo "Detected project: $PROJECT_NAME"
          xcodebuild -project "$PROJECT_NAME.xcodeproj" \
                     -scheme "$PROJECT_NAME (iOS)" \
                     -configuration Release \
                     -destination 'generic/platform=iOS Simulator' \
                     clean build \
                     CODE_SIGN_IDENTITY="" \
                     CODE_SIGNING_REQUIRED=NO \
                     CODE_SIGNING_ALLOWED=NO

      # üì¶ Package the built app into an IPA
      - name: Export .ipa
        run: |
          cd $GITHUB_WORKSPACE/Right-Click-Safari-Extension/build
          mkdir -p output/Payload
          APP_PATH=$(find .. -name "*.app" -type d | head -n 1)
          echo "App found at: $APP_PATH"
          cp -R "$APP_PATH" output/Payload/
          cd output
          zip -r "../safari-extension.ipa" Payload

      # ‚¨ÜÔ∏è Upload artifact so you can download the .ipa file
      - name: Upload .ipa artifact
        uses: actions/upload-artifact@v4
        with:
          name: safari-extension-ipa
          path: Right-Click-Safari-Extension/build/safari-extension.ipa

# --- locate extension directory and validate manifest.json ---
- name: Locate Safari extension directory and validate manifest.json
  run: |
    set -euo pipefail

    # Candidate folder names to check quickly
    CANDIDATES=(SafariWebExtension "Safari Web Extension" Safari-Extension extension src webextension WebExtension)
    FOUND=""
    for d in "${CANDIDATES[@]}"; do
      if [ -d "$d" ] && [ -f "$d/manifest.json" ]; then
        FOUND="$d"
        break
      fi
    done

    # Fallback: search the repository for manifest.json tracked by git
    if [ -z "$FOUND" ]; then
      MANIFEST_PATH=$(git ls-files | grep -i 'manifest.json' | head -n1 || true)
      if [ -n "$MANIFEST_PATH" ]; then
        FOUND=$(dirname "$MANIFEST_PATH")
      fi
    fi

    if [ -z "$FOUND" ]; then
      echo "❌ manifest.json not found in repository. Looked in: ${CANDIDATES[*]} and git index."
      echo "Run 'git ls-files | grep -i manifest.json' locally to see where your manifest is."
      exit 1
    fi

    echo "Found manifest.json in: $FOUND"
    # Validate JSON
    if ! python3 -m json.tool "$FOUND/manifest.json" > /dev/null 2>&1; then
      echo "❌ manifest.json found but it's not valid JSON: $FOUND/manifest.json"
      exit 1
    fi
    echo "✅ manifest.json is valid JSON."

    # Expose for later steps
    echo "EXT_DIR=$FOUND" >> "$GITHUB_ENV"

# --- Convert Safari Web Extension (use EXT_DIR) ---
- name: Convert Safari Web Extension
  run: |
    set -euo pipefail
    if [ -z "${EXT_DIR:-}" ]; then
      echo "EXT_DIR not set - aborting"
      exit 1
    fi

    mkdir -p build
    echo "Running converter on $EXT_DIR ..."
    if ! command -v xcrun >/dev/null 2>&1; then
      echo "❌ xcrun not found on runner path"
      exit 1
    fi

    xcrun safari-web-extension-converter "$EXT_DIR" \
      --no-prompt \
      --project-location build \
      --bundle-identifier com.vavatheone.rightclicksafari \
      --app-name "RightClickSafari"

# --- Build iOS app (archive) using detected .xcodeproj ---
- name: Build iOS app
  run: |
    set -euo pipefail
    # find the generated xcodeproj
    XCODEPROJ=$(find build -maxdepth 2 -name "*.xcodeproj" -print -quit || true)
    if [ -z "$XCODEPROJ" ]; then
      echo "❌ No .xcodeproj found under build/. Converter may have failed."
      ls -R build || true
      exit 1
    fi

    echo "Using Xcode project: $XCODEPROJ"
    PROJECT_NAME=$(basename "$XCODEPROJ" .xcodeproj)
    echo "Detected project name: $PROJECT_NAME"

    # Optionally list schemes to help debugging
    echo "Available schemes:"
    xcodebuild -list -project "$XCODEPROJ" || true

    # Create archive
    xcodebuild archive \
      -project "$XCODEPROJ" \
      -scheme "$PROJECT_NAME (iOS)" \
      -sdk iphoneos \
      -configuration Release \
      -archivePath build/App.xcarchive \
      CODE_SIGN_IDENTITY="" \
      CODE_SIGNING_REQUIRED=NO \
      CODE_SIGNING_ALLOWED=NO \
      DEVELOPMENT_TEAM="" \
      PROVISIONING_PROFILE_SPECIFIER=""
